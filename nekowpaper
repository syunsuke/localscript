#!/bin/sh
######################################################## 
# 2022/03/26
# ok.xmonad@gmail.com
#
# 適当に壁紙を作る
#  要 imagemagick
#  要 feh
#  要 bc
#  要 archlinux logo
########################################################

#######################################################
# 一時ファイル管理ディレクトリ
#######################################################
temp_dir=$(mktemp -d)
trap 'rm -rf ${temp_dir}' EXIT

#######################################################
# オプション処理
#######################################################

usage_exit() {
        echo "Usage: $0 [-b] [-L logopath] [-s size] [-p position] [-d path] imagefile" 1>&2
        exit 1
}

while getopts a:d:L:s:p:bh OPT
do
    case $OPT in
        a)  authname=$OPTARG
            AUTH_FLAG="TRUE"
            ;;
        L)  logoimage=$OPTARG
            LOGO_FLAG="TRUE"
            ;;
        d)  outpath=$OPTARG
            OP_FLAG="TRUE"
            ;;
        s)  size=$OPTARG
            SIZE_FLAG="TRUE"
            ;;
        p)  trimpos=$OPTARG
            TRIM_FLAG="TRUE"
            ;;
        b)  BG_FLAG="TRUE"
            ;;
        h)  usage_exit
            ;;
        \?) usage_exit
            ;;
    esac
done

shift $((OPTIND - 1))

#######################################################
# ルーチン
#######################################################
function getWidth(){
  identify -format "%w" $1
}

function getHeight(){
  identify -format "%h" $1
}

# check_ratio $1 $2 $3 $4
# 縦と横とどちらにあわせて縮小するかを自動で決める
#
# $1 input image width
# $2 input image height
# $3 monitor width
# $4 monitor height
# モニタの高さより大きいとき 1
# モニタの高さより小さいとき 0


# check_ratio $1 $2 $3 $4
# 縦と横とどちらにあわせて縮小するかを自動で決める
#
# $1 input image width
# $2 input image height
# $3 monitor width
# $4 monitor height
# モニタの高さより大きいとき 1
# モニタの高さより小さいとき 0

function detect_resizeopt(){
  ans=`echo "scale=5; ($2 / $1) > ($4 / $3)" | bc`
  if [ ${ans} -eq 1 ];then
    echo "${3}x"
  else
    echo "x${4}"
  fi
}


#######################################################
# ファイル名、パス等
#######################################################

# 入力された画像
input_image=${1}

# ディレクトリとファイル名部分を分ける
i_dir=$(dirname ${input_image})
i_file=$(basename ${input_image})

# jpgファイルで出力する
o_file=${i_file%.*}.jpg

# 大きさ調整された一時画像
scaled_image=${temp_dir}/scaled_image.png

# 出力ファイル名プレフィックス
pre_name="wallpaper"

# ロゴファイル
# aur/archlinux-artwork
# パッケージのインストールが必要
logo_svg="/usr/share/archlinux/logos/archlinux-grad1-light.svg"

# 影付きロゴ
shadowed_logo=${temp_dir}/shadowed_logo.png

#######################################################
# 壁紙作成
#######################################################

#///////////////////////
# 出力サイズの決定
#///////////////////////
mon_w="1920"
mon_h="1080"

if [ "$SIZE_FLAG" = "TRUE" ]; then
    case $size in
      fullHD | normal)
        mon_w="1920"
        mon_h="1080"
        ;;
      WQHD | big)
        mon_w="2560"
        mon_h="1440"
        ;;
      SXGA | old)
        mon_w="1280"
        mon_h="1024"
        ;;
        *)
        mon_w="1920"
        mon_h="1080"
        ;;
    esac
fi

mon_wh="${mon_w}x${mon_h}"

output_basefilename=${pre_name}_${mon_wh}_${o_file}

# 出力名(デフォルト)
result_file=${i_dir}/${output_basefilename}

# 出力先ディレクトリが指定されている時
if [ "$OP_FLAG" = "TRUE" ]; then
  if [ -e ${outpath} ]; then
    result_file=${outpath}/${output_basefilename}
  else
    echo "abort: ${outpath} is not found."
    exit 1
  fi
fi

#///////////////////////
# 入力サイズの調査
#///////////////////////
org_w=$(getWidth $input_image)
org_h=$(getHeight $input_image)


#///////////////////////
# リサイズのオプションを決定
#///////////////////////
resize_opt=$(detect_resizeopt $org_w $org_h $mon_w $mon_h)

#///////////////////////
# 基準点の変更
#///////////////////////
crop_pos="center"

if [ "$TRIM_FLAG" = "TRUE" ]; then
  case ${trimpos} in
    center) crop_pos="center"
      ;;
    north) crop_pos="north"
      ;;
    top) crop_pos="north"
      ;;
    south) crop_pos="south"
      ;;
    bottom) crop_pos="south"
      ;;
    east) crop_pos="east"
      ;;
    right) crop_pos="east"
      ;;
    west) crop_pos="west"
      ;;
    left) crop_pos="west"
      ;;
    *) crop_pos="center"
      ;;
  esac
fi

echo "crop_pos=${crop_pos}"

#///////////////////////
# 画像を縮小して切り出し
#///////////////////////
convert ${input_image} -resize "${resize_opt}" - | \
convert - -gravity ${crop_pos} \
          -crop "${mon_wh}+0+0" \
          ${scaled_image}


#///////////////////////
# 撮影者の表示
#///////////////////////


if [ "$AUTH_FLAG" = "TRUE" ];then
photo_string="photograph\n ${authname}"

convert -background none \
-fill white \
-pointsize 18 \
label:"${photo_string}" \
\( +clone -background "#000000" -shadow 100x5+5+5 \) \
+swap -background none -layers merge +repage png:- | \
convert ${scaled_image} - -gravity southeast -geometry +20+20 \
-composite ${scaled_image}
fi




#######################################################
# ロゴの準備
#######################################################
if [ "$LOGO_FLAG" = "TRUE" ]; then
  logo_svg=${logoimage}
fi

logo_png=${temp_dir}/logo.png

#///////////////////////
# logoの大きさの制限
#///////////////////////
max_logo_w=$((${mon_w} / 3 ))
max_logo_h=$((${mon_h} / 3 ))
max_logo_size_opt="${max_logo_w}x${max_logo_h}>"

#///////////////////////
# archlinuxのロゴファイルをPNGに変換
#///////////////////////
convert -density 96 -background none ${logo_svg} \
  -resize ${max_logo_size_opt} ${logo_png}


#///////////////////////
# archlinuxのロゴファイルに影を付ける
#///////////////////////
convert ${logo_png} \
  \( +clone -background "#000000" -shadow 100x5+5+5 \) \
  +swap -background none -layers merge +repage ${logo_png}


#######################################################
# ロゴ合成
#######################################################
convert ${scaled_image} ${logo_png} \
-gravity southwest -geometry +50+50 \
-composite \
${result_file}

#######################################################
# バックグラウンド画像に設定
#######################################################
if [ "$BG_FLAG" = "TRUE" ]; then
  feh --bg-center ${result_file}
fi

